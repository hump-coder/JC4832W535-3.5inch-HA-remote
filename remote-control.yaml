substitutions:
  friendly_name: Guition Display
  dev_topic: esp32-c3-35-inch-display   # used for MQTT topics
  room_light: switch.bedroom_light_switch_2
  room_temp_sensor: sensor.temperature_kitchen_temperature
  room_ac_zone_switch: switch.zone_6_2

external_components:
  - source: github://esphome/esphome@2025.7.1
    components: [i2c]

font:
  - file: "gfonts://Roboto"
    id: font_clock
    size: 48

esphome:
  name: esp32-c3-35-inch-display
  friendly_name: ${friendly_name}
  platformio_options:
    upload_speed: 921600
    board_build.flash_mode: dio
    board_build.f_flash: 80000000L
    board_build.f_cpu: 240000000L
  on_boot:
    then:
      - lvgl.page.show: overview_page

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: "y"
      CONFIG_SPIRAM_RODATA: "y"

psram:
  mode: octal
  speed: 80MHz

logger:
  baud_rate: 921600
  level: DEBUG

# Home Assistant native API (needed for homeassistant.service & HA state mirrors)
api:
  encryption:
    key: "zCbqpKMFr1E/T+n7OM26ggGNnIfVMToeC7e0Ue9xeJ4="

# Optional MQTT (publishes button/touch events; accepts simple JSON commands)
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_user
  password: !secret mqtt_pass
  topic_prefix: ${dev_topic}
  discovery: false
  on_json_message:
    - topic: cmd/${dev_topic}
      then:
        # Set backlight from JSON: {"backlight": 0..100}
        - if:
            condition:
              lambda: 'return x.containsKey("backlight");'
            then:
              - light.turn_on:
                  id: backlight_light
                  brightness: !lambda 'return (x["backlight"].as<float>() / 100.0f);'
        # Show page from JSON: {"page":"room"} or {"page":"house"}
        - if:
            condition:
              lambda: 'return x.containsKey("page") && x["page"].as<std::string>() == "room";'
            then:
              - lvgl.page.show: room_page
        - if:
            condition:
              lambda: 'return x.containsKey("page") && x["page"].as<std::string>() == "house";'
            then:
              - lvgl.page.show: house_page
        - if:
            condition:
              lambda: 'return x.containsKey("page") && x["page"].as<std::string>() == "overview";'
            then:
              - lvgl.page.show: overview_page

ota:
  - platform: esphome
    password: "55ea0f7bcc25fa0433a43dfaf0009751"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Esp32-C3-35-Inch-Display"
    password: "KTWqn606IwU5"
  on_connect:
    - lvgl.label.update:
        id: lbl_wifi
        text: LV_SYMBOL_WIFI
        text_color: 0xFFFFFF
    - lvgl.label.update:
        id: lbl_wifi_h
        text: LV_SYMBOL_WIFI
        text_color: 0xFFFFFF
  on_disconnect:
    - lvgl.label.update:
        id: lbl_wifi
        text: LV_SYMBOL_CLOSE
        text_color: 0xFF0000
    - lvgl.label.update:
        id: lbl_wifi_h
        text: LV_SYMBOL_CLOSE
        text_color: 0xFF0000

captive_portal:

# Clock source from Home Assistant
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - lvgl.label.update:
              id: lbl_clock
              text: !lambda |-
                auto t = id(homeassistant_time).now();
                char buf[9];
                t.strftime(buf, sizeof(buf), "%I:%M %p");
                return std::string(buf);
          - lvgl.label.update:
              id: lbl_clock_h
              text: !lambda |-
                auto t = id(homeassistant_time).now();
                char buf[9];
                t.strftime(buf, sizeof(buf), "%I:%M %p");
                return std::string(buf);
          - lvgl.label.update:
              id: lbl_clock_o
              text: !lambda |-
                auto t = id(homeassistant_time).now();
                char buf[6];
                t.strftime(buf, sizeof(buf), "%I:%M");
                return std::string(buf);
          - lvgl.label.update:
              id: lbl_day_o
              text: !lambda |-
                auto t = id(homeassistant_time).now();
                char buf[10];
                t.strftime(buf, sizeof(buf), "%A");
                return std::string(buf);

text_sensor:
  - platform: homeassistant
    id: ts_kitchen
    entity_id: light.kitchen_light_dimmer
    on_value:
      - lvgl.label.update:
          id: lbl_house_kitchen
          text: !lambda |-
            if (x == "on" || x == "off") return std::string("Kitchen");
            return std::string("Kitchen (") + x + ")";
      - lvgl.button.update:
          id: btn_house_kitchen
          bg_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xffc107);
            if (x == "off") return lv_color_hex(0x2d87c8);
            return lv_color_hex(0x808080);
          bg_grad_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xdfa100);
            if (x == "off") return lv_color_hex(0x1973b4);
            return lv_color_hex(0x606060);
          bg_grad_dir: VER
      - lvgl.button.update:
          id: btn_overview_light
          bg_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xffc107);
            if (x == "off") return lv_color_hex(0x2d87c8);
            return lv_color_hex(0x808080);
          bg_grad_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xdfa100);
            if (x == "off") return lv_color_hex(0x1973b4);
            return lv_color_hex(0x606060);
          bg_grad_dir: VER
  - platform: homeassistant
    id: ts_bedroom
    entity_id: switch.bedroom_light_switch_2
    on_value:
      - lvgl.label.update:
          id: lbl_house_bedroom
          text: !lambda |-
            if (x == "on" || x == "off") return std::string("Bedroom");
            return std::string("Bedroom (") + x + ")";
      - lvgl.button.update:
          id: btn_house_bedroom
          bg_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xffc107);
            if (x == "off") return lv_color_hex(0x2d87c8);
            return lv_color_hex(0x808080);
          bg_grad_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xdfa100);
            if (x == "off") return lv_color_hex(0x1973b4);
            return lv_color_hex(0x606060);
          bg_grad_dir: VER
  - platform: homeassistant
    id: ts_toilet
    entity_id: switch.toilet_light_switch_switch_3
    on_value:
      - lvgl.label.update:
          id: lbl_house_toilet
          text: !lambda |-
            if (x == "on" || x == "off") return std::string("Toilet");
            return std::string("Toilet (") + x + ")";
      - lvgl.button.update:
          id: btn_house_toilet
          bg_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xffc107);
            if (x == "off") return lv_color_hex(0x2d87c8);
            return lv_color_hex(0x808080);
          bg_grad_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xdfa100);
            if (x == "off") return lv_color_hex(0x1973b4);
            return lv_color_hex(0x606060);
          bg_grad_dir: VER
  - platform: homeassistant
    id: ts_porch
    entity_id: light.switch_2
    on_value:
      - lvgl.label.update:
          id: lbl_house_porch
          text: !lambda |-
            if (x == "on" || x == "off") return std::string("Porch");
            return std::string("Porch (") + x + ")";
      - lvgl.button.update:
          id: btn_house_porch
          bg_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xffc107);
            if (x == "off") return lv_color_hex(0x2d87c8);
            return lv_color_hex(0x808080);
          bg_grad_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xdfa100);
            if (x == "off") return lv_color_hex(0x1973b4);
            return lv_color_hex(0x606060);
          bg_grad_dir: VER
  - platform: homeassistant
    id: ts_north
    entity_id: switch.lights_outside_north
    on_value:
      - lvgl.label.update:
          id: lbl_house_north
          text: !lambda |-
            if (x == "on" || x == "off") return std::string("North");
            return std::string("North (") + x + ")";
      - lvgl.button.update:
          id: btn_house_north
          bg_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xffc107);
            if (x == "off") return lv_color_hex(0x2d87c8);
            return lv_color_hex(0x808080);
          bg_grad_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xdfa100);
            if (x == "off") return lv_color_hex(0x1973b4);
            return lv_color_hex(0x606060);
          bg_grad_dir: VER
  - platform: homeassistant
    id: ts_bbq
    entity_id: switch.lights_outside_north_bbq
    on_value:
      - lvgl.label.update:
          id: lbl_house_bbq
          text: !lambda |-
            if (x == "on" || x == "off") return std::string("BBQ");
            return std::string("BBQ (") + x + ")";
      - lvgl.button.update:
          id: btn_house_bbq
          bg_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xffc107);
            if (x == "off") return lv_color_hex(0x2d87c8);
            return lv_color_hex(0x808080);
          bg_grad_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xdfa100);
            if (x == "off") return lv_color_hex(0x1973b4);
            return lv_color_hex(0x606060);
          bg_grad_dir: VER
  - platform: homeassistant
    id: ts_west
    entity_id: switch.lights_outside_north_west
    on_value:
      - lvgl.label.update:
          id: lbl_house_west
          text: !lambda |-
            if (x == "on" || x == "off") return std::string("West");
            return std::string("West (") + x + ")";
      - lvgl.button.update:
          id: btn_house_west
          bg_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xffc107);
            if (x == "off") return lv_color_hex(0x2d87c8);
            return lv_color_hex(0x808080);
          bg_grad_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xdfa100);
            if (x == "off") return lv_color_hex(0x1973b4);
            return lv_color_hex(0x606060);
          bg_grad_dir: VER
  - platform: homeassistant
    id: ts_west_flood
    entity_id: switch.floodlight_outside_east
    on_value:
      - lvgl.label.update:
          id: lbl_house_west_flood
          text: !lambda |-
            if (x == "on" || x == "off") return std::string("West Flood");
            return std::string("West Flood (") + x + ")";
      - lvgl.button.update:
          id: btn_house_west_flood
          bg_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xffc107);
            if (x == "off") return lv_color_hex(0x2d87c8);
            return lv_color_hex(0x808080);
          bg_grad_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xdfa100);
            if (x == "off") return lv_color_hex(0x1973b4);
            return lv_color_hex(0x606060);
          bg_grad_dir: VER
  - platform: homeassistant
    id: ts_rgb_flood
    entity_id: light.rgb_floodlight
    on_value:
      - lvgl.label.update:
          id: lbl_house_rgb_flood
          text: !lambda |-
            if (x == "on" || x == "off") return std::string("RGB Flood");
            return std::string("RGB Flood (") + x + ")";
      - lvgl.button.update:
          id: btn_house_rgb_flood
          bg_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xffc107);
            if (x == "off") return lv_color_hex(0x2d87c8);
            return lv_color_hex(0x808080);
          bg_grad_color: !lambda |-
            if (x == "on")  return lv_color_hex(0xdfa100);
            if (x == "off") return lv_color_hex(0x1973b4);
            return lv_color_hex(0x606060);
          bg_grad_dir: VER
  - platform: homeassistant
    id: ts_ac_zone
    entity_id: ${room_ac_zone_switch}
    on_value:
      - lvgl.label.update:
          id: lbl_zone
          text: !lambda 'return std::string("Zone: ") + (x == "on" ? "Open" : "Closed");'
      - lvgl.button.update:
          id: btn_zone
          bg_color: !lambda 'return x == "on" ? lv_color_hex(0xffc107) : lv_color_hex(0x2d87c8);'
          bg_grad_color: !lambda 'return x == "on" ? lv_color_hex(0xdfa100) : lv_color_hex(0x1973b4);'
          bg_grad_dir: VER
      - lvgl.button.update:
          id: btn_overview_fan
          bg_color: !lambda 'return x == "on" ? lv_color_hex(0xffc107) : lv_color_hex(0x2d87c8);'
          bg_grad_color: !lambda 'return x == "on" ? lv_color_hex(0xdfa100) : lv_color_hex(0x1973b4);'
          bg_grad_dir: VER

# ---------- Display (QSPI DBI) ----------
spi:
  id: display_qspi
  type: quad
  clk_pin: 47
  data_pins: [21, 48, 40, 39]

output:
  - platform: ledc
    pin: GPIO1
    id: backlight

light:
  - platform: monochromatic
    id: backlight_light
    output: backlight
    name: "Backlight"
    restore_mode: ALWAYS_ON

display:
  - platform: qspi_dbi
    model: axs15231
    data_rate: 40MHz        # drop to 20MHz if you ever see garble
    id: my_display
    spi_id: display_qspi
    dimensions:
      height: 480
      width: 320
    cs_pin: 45
    rotation: 90            # landscape
    auto_clear_enabled: false
    update_interval: never

# ---------- Touch (I2C capacitive) ----------
i2c:
  id: touchscreen_bus
  sda: 4
  scl: 8
  frequency: 400kHz
  scan: false                # 0x3B device found during scan

# Goodix GT911 touch controller (common on JC3248W535).
# Update address if logs show a different value (e.g., 0x14).
touchscreen:
  - platform: axs15231
    id: my_touch
    i2c_id: touchscreen_bus
    update_interval: 30ms
    calibration:
      x_min: 0
      x_max: 479
      y_min: 0
      y_max: 319
    #address: 0x3B
    transform:
      swap_xy: true
      mirror_y: true
      mirror_x: false
    on_touch:
 #     - logger.log:
 #         format: "Touch: (%d,%d)"
 #         args: [touch.x, touch.y]
 #         level: DEBUG
 #     - lvgl.label.update:
 #         id: lbl_touch
 #         text: !lambda |-
 #           char buf[32];
 #           snprintf(buf, sizeof(buf), "%d,%d", touch.x, touch.y);
 #           return std::string(buf);
      - mqtt.publish_json:
          topic: tele/${dev_topic}/touch
          payload: |-
            root["x"] = touch.x;
            root["y"] = touch.y;

# If i2c scan shows 0x38 (FocalTech), comment AXS15231 above and use this instead:
# touchscreen:
#   - platform: ft5x06
#     id: my_touch
#     i2c_id: touchscreen_bus
#     interrupt_pin: GPIO3
#     reset_pin: GPIO10
#     transform:
#       swap_xy: true
#       mirror_y: true
#     on_touch:
#       - mqtt.publish_json:
#           topic: tele/${dev_topic}/touch
#           payload: |-
#             root["x"] = touch.x;
#             root["y"] = touch.y;


 # WiFi signal strength sensor
sensor:
  - platform: wifi_signal
    id: wifi_dbm
    update_interval: 10s
    on_value:
      - lvgl.label.update:
          id: lbl_wifi
          text: !lambda |-
            int bars = 0;
            if (x >= -55) bars = 4;
            else if (x >= -65) bars = 3;
            else if (x >= -75) bars = 2;
            else if (x >= -85) bars = 1;
            const char* levels[] = {"", "|", "||", "|||", "||||"};
            return std::string(LV_SYMBOL_WIFI " ") + levels[bars];
  - platform: homeassistant
    id: room_light_level
    entity_id: ${room_light}
    attribute: brightness
    on_value:
      - lvgl.slider.update:
          id: sld_light
          value: !lambda 'return x * 100.0 / 255.0;'
  - platform: homeassistant
    id: kitchen_light_level
    entity_id: light.kitchen_light_dimmer
    attribute: brightness
    on_value:
      - lvgl.slider.update:
          id: sld_overview_light
          value: !lambda 'return x * 100.0 / 255.0;'
  - platform: homeassistant
    id: room_temperature
    entity_id: ${room_temp_sensor}
    on_value:
      - lvgl.label.update:
          id: lbl_temp
          text: !lambda 'char buf[16]; snprintf(buf, sizeof(buf), "Temp: %.1f°C", x); return std::string(buf);'
      - lvgl.label.update:
          id: lbl_temp_o
          text: !lambda 'char buf[8]; snprintf(buf, sizeof(buf), "%.1f°C", x); return std::string(buf);'
# ---------- LVGL UI (with working props) ----------
lvgl:
  displays:
    - my_display
  touchscreens:
    - touchscreen_id: my_touch


packages:
  room_page: !include ui/room_page.yaml
  house_page: !include ui/house_page.yaml
  overview_page: !include ui/overview_page.yaml
